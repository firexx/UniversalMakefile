# using from project subdirectory:
#	make CONF=debug 
#	make CONF=release 
#	make clean
#
# Variables
# PROJECT=projectname                            // projectname
# SUBPROJECTS=../subproject1 ../subproject2      // sub projects they will be build before the project
# INCLUDES=-I/path/to/headers                    // include header files paths specified in INCLUDES variable
# 
# CXXFLAGS_BASE=-c -Wall -DNDEBUG $(INCLUDES)    // CXXFLAGS for all configuration
# CXXFLAGS_RELEASE= -O3 -DRELEASE				 // CXXFLAGS for release configuration
# CXXFLAGS_DEBUG  = -O0 -g -DDEBUG				 // CXXFLAGS for debug configuration
# 
# LIBRARY_PATH=-L/path/to/libraryes              // paths for libraries
# 
# LDFLAGS_BASE=-llibraryname                     // link library liblibraryname.a
# LDFLAGS_DEBUG=<debug flags>                    // flags for linker in debug mode
# LDFLAGS_RELEASE=<release flags>                // flags for linker in release mode
#
# IGNORE_FILES=file1 file2                       // ignore file1 file2
#                
# EXECUTABLE=ExecutableName						 // specify this variable for creating the executable
# LIBRARY=LibraryName.a							 // specify this variable for creating the static library
# DYNAMIC=SharedLibraryName.so                   // specify this variable for creating the shared library

############## DON'T EDIT UNDER ######################

.PHONY: all
all: build

######### Debug ######################

.PHONY: files
files: 
	@echo "\e[0;32mPROJECT         \e[0m= $(PROJECT)"
	@echo "\e[0;32mSUBPROJECTS     \e[0m= $(SUBPROJECTS)"
	@echo "\e[0;32mSUBPROJECTS_DIR \e[0m= $(SUBPROJECTS_TARGETDIRS)"
	@echo "\e[0;32mSUBPROJ_CELAN   \e[0m= $(SUBPROJECTSTOCELAN)"
	@echo "\e[0;32mDO_CONF         \e[0m= $(DO_CONF)"
	@echo "\e[0;32mTARGETDIR       \e[0m= $(TARGETDIR)"
	@echo "\e[0;32mCXXFLAGS        \e[0m= $(CXXFLAGS)"
	@echo "\e[0;32mLIBRARY_PATH    \e[0m= $(LIBRARY_PATH)"
	@echo "\e[0;32mLDFLAGS         \e[0m= $(LDFLAGS)"
	@echo "\e[0;32mEXECUTABLE      \e[0m= $(EXECUTABLE)"
	@echo "\e[0;32mLIBRARY         \e[0m= $(LIBRARY)"
	@echo "\e[0;32mDYNAMIC         \e[0m= $(DYNAMIC)"
	@echo "\e[0;32mEXECUTABLE_FILE \e[0m= $(EXECUTABLE_FILE)"
	@echo "\e[0;32mLIBRARY_FILE    \e[0m= $(LIBRARY_FILE)"
	@echo "\e[0;32mDYNAMIC_FILE    \e[0m= $(DYNAMIC_FILE)"
	@echo "\e[0;32mIGNORE_FILES    \e[0m= $(IGNORE_FILES)"
	@echo "\e[0;32mSOURCE_FILES    \e[0m= $(SOURCE_FILES)"
	@echo "\e[0;32mHEADER_FILES    \e[0m= $(HEADER_FILES)"
	@echo "\e[0;32mSOURCES         \e[0m= $(SOURCES)"
	@echo "\e[0;32mOBJECTS         \e[0m= $(OBJECTS)"
	@echo "\e[0;32mHEADERS         \e[0m= $(HEADERS)"
#	@echo "\e[0;32mMOCKS           \e[0m= $(MOCKS)"
	@echo "\e[0;32mUIS             \e[0m= $(UIS)"
	@echo "\e[0;32mUI_HEADERS      \e[0m= $(UI_HEADERS)"
	@echo "\e[0;32mQRCS            \e[0m= $(QRCS)"
	@echo "\e[0;32mMOC_HEADERS     \e[0m= $(MOC_HEADERS)"
	@echo "\e[0;32mMOCS            \e[0m= $(MOCS)"
	@echo "\e[0;32mBINS            \e[0m= $(BINS)"
	@echo "\e[0;32mDEPS            \e[0m= $(DEPS)"
	@echo "\e[0;32mSP              \e[0m= $(SP)"

DEFAULT_VERBOSITY = 0
V_AT = $(V_AT_$(V))
V_AT_ = $(V_AT_$(DEFAULT_VERBOSITY))
V_AT_0 = @
V_AT_1 =

DEFAULT_CONF = release
DO_CONF = $(CONF_$(CONF))
CONF_ = $(CONF_$(DEFAULT_CONF))
CONF_release=release
CONF_debug=debug

SOURCE_FILES=$(filter-out $(IGNORE_FILES),$(wildcard *.cpp))
HEADER_FILES=$(filter-out $(IGNORE_FILES),$(wildcard *.h *.hpp))

SOURCES=$(sort $(SOURCE_FILES))
HEADERS=$(sort $(HEADER_FILES))

INCLUDES+= $(addprefix -I,$(SUBPROJECTS))
LIBRARY_PATH+= $(addprefix -L,$(SUBPROJECTS))

#MOCKS=$(patsubst %.h,%_mock.h,$(patsubst %.hpp,%_mock.hpp,$(filter-out stdafx.h ui_%.h,$(HEADERS))))

UIS=$(filter-out $(IGNORE_FILES),$(wildcard *.ui))
UI_HEADERS=$(patsubst %.ui,ui_%.h,$(UIS))
HEADER_FILES+=$(UI_HEADERS)

ifdef HEADERS
MOC_HEADERS=$(shell grep "Q_OBJECT" -l $(HEADERS) 2>/dev/null)
endif
MOCS=$(patsubst %.h,moc_%.cpp,$(MOC_HEADERS))
SOURCE_FILES+=$(MOCS)


QRCS=$(filter-out $(IGNORE_FILES),$(wildcard *.qrc))
QRC_SOURCES=$(patsubst %.qrc,qrc_%.cpp,$(QRCS))
SOURCE_FILES+=$(QRC_SOURCES)

BINS=$(filter-out $(IGNORE_FILES),$(wildcard *.hex *.xsvf))
BIN_HEADERS=$(patsubst %.xsvf,%.h,$(patsubst %.hex,%.h,$(BINS)))
BIN_SOURCES=$(patsubst %.xsvf,%.cpp,$(patsubst %.hex,%.cpp,$(BINS)))

HEADER_FILES+=$(BIN_HEADERS)
SOURCE_FILES+=$(BIN_SOURCES)


ifdef EXECUTABLE
EXECUTABLE_FILE=$(TARGETDIR)/$(EXECUTABLE)
endif
ifdef LIBRARY
LIBRARY_FILE=$(TARGETDIR)/$(LIBRARY)
endif
ifdef DYNAMIC
DYNAMIC_FILE=$(TARGETDIR)/$(DYNAMIC)
endif


######## Configuration controlling #########

CXXFLAGS=$(CXXFLAGS_BASE)
LDFLAGS=$(LDFLAGS_BASE) 
DEPDIR=deps
DEPS:=$(patsubst %.cpp,$(DEPDIR)/%.d,$(SOURCE_FILES))

ifeq ($(DO_CONF),release)
    CXXFLAGS+=$(CXXFLAGS_RELEASE)
    LDFLAGS+= $(LDFLAGS_RELEASE)
else 
    CXXFLAGS+=$(CXXFLAGS_DEBUG)
    LDFLAGS+= $(LDFLAGS_DEBUG)
endif

TARGETDIR=bin/$(DO_CONF)
OBJECTS+=$(addprefix $(TARGETDIR)/,$(subst .c,.o,$(subst .cpp,.o,$(SOURCES))))

.PHONY: build
build: $(DYNAMIC_FILE) $(LIBRARY_FILE) $(EXECUTABLE_FILE) 

SUBPROJECTS_TARGETDIRS=$(addsuffix /$(TARGETDIR),$(SUBPROJECTS))
$(SUBPROJECTS_TARGETDIRS): $(SUBPROJECTS)
	$(V_AT)$(foreach sub,$(SUBPROJECTS), echo " =====> build subproject $(sub)"; $(MAKE) -C $(sub) -f Makefile.linux build; )

SUBPROJECTSTOCELAN= $(addsuffix "-toclean",$(SUBPROJECTS))

.PHONY:clean-all  $(SUBPROJECTSTOCELAN)
clean-all:  $(SUBPROJECTSTOCELAN) clean

$(SUBPROJECTSTOCELAN) :
	$(V_AT)$(MAKE) -C $(subst "-toclean", , $@) -f Makefile.linux clean

 
.PHONY: clean
clean:
	@echo " =====> clean generated files" 
	$(V_AT)$(RM) -r $(TARGETDIR) $(DEPDIR) $(EXECUTABLE_FILE) $(LIBRARY_FILE) $(DYNAMIC_FILE) $(OBJECTS) $(MOCKS) $(MOCS) $(BIN_HEADERS) $(BIN_SOURCES) \
		$(QRC_SOURCES) $(UI_HEADERS) *.bak

$(EXECUTABLE_FILE): $(OBJECTS)
	@echo " =====> linking an executable $(EXECUTABLE)"
	$(V_AT)$(CXX) -o $@ $(OBJECTS) $(addsuffix /$(TARGETDIR),$(LIBRARY_PATH)) $(EXT_LIBRARY_PATH) $(LDFLAGS)

$(LIBRARY_FILE): $(OBJECTS)
	@echo " =====> linking a static library $(LIBRARY)"
	$(V_AT)$(AR) rcs $@ $(OBJECTS)

$(DYNAMIC_FILE): $(OBJECTS)
	@echo " =====> linking a dynamic library $(DYNAMIC)"
	$(V_AT)$(CXX) -shared -o $@ $(OBJECTS) $(addsuffix /$(TARGETDIR),$(LIBRARY_PATH)) $(LDFLAGS)

$(TARGETDIR)/%.o : %.cpp
	@echo " =====> compile $< to $@"
	$(V_AT)mkdir -p $(TARGETDIR)
	$(V_AT)$(CXX) $(CXXFLAGS) $< -o $@

$(DEPDIR)/%.d : %.cpp
	@echo " =====> cleate dependency $< to $@"
	$(V_AT)mkdir -p $(DEPDIR)
	$(V_AT)$(CXX) $(CXXFLAGS) -M $< | sed -e 's%\($*\)\.o[ :]*%$(TARGETDIR)/\1.o $@ : %g' > $@

######### BUILD ORDER ######################
$(BIN_HEADERS) : 
$(BIN_SOURCES): $(BIN_HEADERS) 
$(UI_HEADERS): $(BIN_SOURCES) 
$(QRC_SOURCES): $(UI_HEADERS) 
$(MOCS): $(QRC_SOURCES)
$(DEPS): $(MOCS) 
$(OBJECTS): $(DEPS)  
$(DYNAMIC_FILE): $(SUBPROJECTS_TARGETDIRS)  $(OBJECTS) 
$(LIBRARY_FILE): $(SUBPROJECTS_TARGETDIRS) $(OBJECTS) 
$(EXECUTABLE_FILE):  $(SUBPROJECTS_TARGETDIRS) $(OBJECTS) 

######### Google Mock ################
#.PHONY: mock
#mock: $(HEADERS) $(MOCKS)
#
#%_mock.h %_mock.hpp: %.h
#	gmock_gen $< > $@ 
#
######### binary convertion ################

define BIN_CONVERT_H= 
	@echo "#ifndef __$(shell basename $@ .h | tr a-z A-Z )_H__" > $@      
	@echo "#define __$(shell basename $@ .h | tr a-z A-Z )_H__" >> $@     
	@echo >> $@                                                           
	@echo "extern size_t $(shell basename $@ .h)_size;">> $@ 
	@echo "extern unsigned char $(shell basename $@ .h)[];" >> $@             
	@echo >> $@                                                           
	@echo "#endif" >> $@                                                  
	@echo  >> $@                                   
endef

define BIN_CONVERT_C=
	@echo "#include \"StdAfx.h\""> $@      
	@echo "#include \"$(shell basename $@ .cpp).h\"" >> $@
	@echo >> $@                                                           
	@echo "size_t $(shell basename $@ .cpp)_size=$(shell stat -L -c '%s' $< );">> $@ 
	@echo "unsigned char $(shell basename $@ .cpp)[] = {" >> $@             
	@xxd -i < $< >> $@                                                    
	@echo "};" >> $@                                                      
	@echo >> $@                                                           
endef

%.h: %.hex
	@echo " =====> convert $< to $@"
	$(V_AT)$(BIN_CONVERT_H)

%.h: %.xsvf
	@echo " =====> convert $< to $@"
	$(V_AT)$(BIN_CONVERT_H)

%.cpp : %.hex
	@echo " =====> convert $< to $@"
	$(V_AT)$(BIN_CONVERT_C)

%.cpp : %.xsvf
	@echo " =====> convert $< to $@"
	$(V_AT)$(BIN_CONVERT_C)

######### QT #########################

ui_%.h: %.ui
	@echo " =====> convert $< to $@"
	$(V_AT)uic $< -o $@

moc_%.cpp: %.h
	@echo " =====> convert $< to $@"
	$(V_AT)moc $< -o $@

qrc_%.cpp: %.qrc
	@echo " =====> convert $< to $@"
	$(V_AT)rcc -name $(basename $< ) $< -o $@

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),clean-all)
-include $(DEPS)
endif
endif
